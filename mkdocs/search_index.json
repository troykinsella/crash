{
    "docs": [
        {
            "location": "/", 
            "text": "Crash\n\n\nCrash is a command-line tool for executing test plans and reporting results, written in Go.\nIt works on Darwin, Linux, and Windows systems, with 64-bit architecture.\n\n\n\n\nInstallation\n\n\nBinary Distribution\n\n\nCrash is distributed as a single OS-/Architecture-specific executable binary.\n\n\nHead over to \nReleases\n and download the appropriate \nbinary for your system. Then, move the binary to a convenient location for execution.\n\n\nOr, run:\n\n\nVERSION=0.0.5\nOS=linux # or darwin, or windows\ncurl -SsL -o /usr/local/bin/crash https://github.com/troykinsella/crash/releases/download/v${VERSION}/crash_${OS}_amd64\nchmod +x /usr/local/bin/crash\n\n\n\n\nGetting Started\n\n\nCreate a \nCrashfile\n\n\n---\nplans:\n- plan: Sooper Site\n  steps:\n  - run:\n      name: Home Page\n      type: http\n      params:\n        method: get\n        url: http://example.com\n    check:\n    - status-code in 200, 299 // http status ${status-code} is 2xx\n    - body contains '\n!doctype html\n' // has html5 doctype declaration\n    - headers.content-type eq 'text/html'\n\n\n\n\nThis \nCrashfile\n has a single plan which runs an action that performs an HTTP request.\nAfter a response is received, three assertions are performed against the response data, \nspecifically, \nstatus-code\n, \nbody\n, and \nheaders\n, which, among others, are created by \ncrash\n's\n\nhttp\n action.\n\n\nRun \ncrash test\n\n\nIn the same directory as your \nCrashfile\n, run \ncrash test\n. For clarity's sake, let's\nadd the \n-vv\n (add verbosity) option to get a little more logging output.\n\n\ncrash test -vv\n\n\n\n\n... and examine the output:\n\n\n# . 0.0s Sooper Site\n- . 0.0s serial\n! . 0.0s Home Page\nI . 0.0s GET http://example.com -\n 200\n! \u2713 0.0s (24.493644ms) Home Page\n? \u2713 http status 200 is 2xx\n? \u2713 has html5 doctype declaration\n? \u2713 headers.content-type eq 'text/html'\n- \u2713 0.0s (24.699688ms) serial\n# \u2713 0.0s (24.725096ms) Sooper Site", 
            "title": "Home"
        }, 
        {
            "location": "/#crash", 
            "text": "Crash is a command-line tool for executing test plans and reporting results, written in Go.\nIt works on Darwin, Linux, and Windows systems, with 64-bit architecture.", 
            "title": "Crash"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#binary-distribution", 
            "text": "Crash is distributed as a single OS-/Architecture-specific executable binary.  Head over to  Releases  and download the appropriate \nbinary for your system. Then, move the binary to a convenient location for execution.  Or, run:  VERSION=0.0.5\nOS=linux # or darwin, or windows\ncurl -SsL -o /usr/local/bin/crash https://github.com/troykinsella/crash/releases/download/v${VERSION}/crash_${OS}_amd64\nchmod +x /usr/local/bin/crash", 
            "title": "Binary Distribution"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#create-a-crashfile", 
            "text": "---\nplans:\n- plan: Sooper Site\n  steps:\n  - run:\n      name: Home Page\n      type: http\n      params:\n        method: get\n        url: http://example.com\n    check:\n    - status-code in 200, 299 // http status ${status-code} is 2xx\n    - body contains ' !doctype html ' // has html5 doctype declaration\n    - headers.content-type eq 'text/html'  This  Crashfile  has a single plan which runs an action that performs an HTTP request.\nAfter a response is received, three assertions are performed against the response data, \nspecifically,  status-code ,  body , and  headers , which, among others, are created by  crash 's http  action.", 
            "title": "Create a Crashfile"
        }, 
        {
            "location": "/#run-crash-test", 
            "text": "In the same directory as your  Crashfile , run  crash test . For clarity's sake, let's\nadd the  -vv  (add verbosity) option to get a little more logging output.  crash test -vv  ... and examine the output:  # . 0.0s Sooper Site\n- . 0.0s serial\n! . 0.0s Home Page\nI . 0.0s GET http://example.com -  200\n! \u2713 0.0s (24.493644ms) Home Page\n? \u2713 http status 200 is 2xx\n? \u2713 has html5 doctype declaration\n? \u2713 headers.content-type eq 'text/html'\n- \u2713 0.0s (24.699688ms) serial\n# \u2713 0.0s (24.725096ms) Sooper Site", 
            "title": "Run crash test"
        }, 
        {
            "location": "/test_results/", 
            "text": "Introduction\n\n\nRunning \ncrash test\n produces output that details the passing and failing elements of\nthe test plan execution.\n\n\nLogging Levels\n\n\nOutput verbosity is controlled by the \n-v\n option, passed to \ncrash test\n. Messages\nare printed with further verbosity by supplying \n-vv\n, and further still with \n-vvv\n.\nAdditionally, passing \n-q\n (quiet) turns off logging output altogether.\n\n\nThe verbosity options correlate to logging level as follows:\n\n\n\n\n\n\n\n\nOption\n\n\nLogging Level\n\n\n\n\n\n\n\n\n\n\n-q\n\n\nOFF\n\n\n\n\n\n\n(Neither \n-q\n nor \n-v\n)\n\n\nDEFAULT\n\n\n\n\n\n\n-v\n\n\nDETAIL\n\n\n\n\n\n\n-vv\n\n\nINFO\n\n\n\n\n\n\n-vvv\n\n\nDEBUG\n\n\n\n\n\n\n\n\nOutput for Humans\n\n\nCrash events are printed according to this format:\n\n\nmessage-type\n \nsuccess\n [elapsed-time] [step-duration] \nmessage\n\n\n\n\n\nThe presence of \nelapsed-time\n and \nstep-duration\n columns are optional, and are \npredictable based on the \nmessage-type\n.\n\n\nFirst Column: Message Type\n\n\n\n\n\n\n\n\nSymbol\n\n\nWhen\n\n\nLevel\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n#\n\n\nStart\n\n\nDETAIL\n\n\nPlan execution started\n\n\n\n\n\n\n#\n\n\nFinish\n\n\nDEFAULT\n\n\nPlan execution finished\n\n\n\n\n\n\n-\n\n\nStart\n\n\nINFO\n\n\nSerial execution started\n\n\n\n\n\n\n-\n\n\nFinish\n\n\nINFO\n\n\nSerial execution finished\n\n\n\n\n\n\n=\n\n\nStart\n\n\nINFO\n\n\nParallel execution started\n\n\n\n\n\n\n=\n\n\nFinish\n\n\nINFO\n\n\nParallel execution finished\n\n\n\n\n\n\n!\n\n\nStart\n\n\nDETAIL\n\n\nAction execution started\n\n\n\n\n\n\n!\n\n\nFinish\n\n\nDEFAULT\n\n\nAction execution finished\n\n\n\n\n\n\n?\n\n\nOccurrence\n\n\nDETAIL\n when pass, \nDEFAULT\n when fail\n\n\nCheck, a.k.a. assertion\n\n\n\n\n\n\nI\n\n\nOccurrence\n\n\nINFO\n\n\nInfo log message\n\n\n\n\n\n\nD\n\n\nOccurrence\n\n\nDEBUG\n\n\nDebug log message\n\n\n\n\n\n\n\n\nSecond Column: Success\n\n\n\n\n\n\n\n\nSymbol\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n.\n\n\nSuccess is not relevant to the message\n\n\n\n\n\n\n\u2713\n\n\nPass\n\n\n\n\n\n\n\u2717\n\n\nFailure\n\n\n\n\n\n\n\n\nElapsed Time\n\n\nReports the time elapsed in seconds since the beginning of the \ncrash test\n execution. Not present for checks\n(when the message type symbol is \n?\n).\n\n\nStep Duration\n\n\nShows the time elapsed upon completion of a step, since the beginning of the step, \nas a string in the form \"3m0.5s\". Durations less than one second use a smaller unit \n(milli-, micro-, or nanoseconds).\n\n\nMessage\n\n\nThe meat and potatoes of the logged event.\n\n\nOutput for Machines\n\n\nTODO", 
            "title": "Test Results"
        }, 
        {
            "location": "/test_results/#introduction", 
            "text": "Running  crash test  produces output that details the passing and failing elements of\nthe test plan execution.", 
            "title": "Introduction"
        }, 
        {
            "location": "/test_results/#logging-levels", 
            "text": "Output verbosity is controlled by the  -v  option, passed to  crash test . Messages\nare printed with further verbosity by supplying  -vv , and further still with  -vvv .\nAdditionally, passing  -q  (quiet) turns off logging output altogether.  The verbosity options correlate to logging level as follows:     Option  Logging Level      -q  OFF    (Neither  -q  nor  -v )  DEFAULT    -v  DETAIL    -vv  INFO    -vvv  DEBUG", 
            "title": "Logging Levels"
        }, 
        {
            "location": "/test_results/#output-for-humans", 
            "text": "Crash events are printed according to this format:  message-type   success  [elapsed-time] [step-duration]  message   The presence of  elapsed-time  and  step-duration  columns are optional, and are \npredictable based on the  message-type .", 
            "title": "Output for Humans"
        }, 
        {
            "location": "/test_results/#first-column-message-type", 
            "text": "Symbol  When  Level  Description      #  Start  DETAIL  Plan execution started    #  Finish  DEFAULT  Plan execution finished    -  Start  INFO  Serial execution started    -  Finish  INFO  Serial execution finished    =  Start  INFO  Parallel execution started    =  Finish  INFO  Parallel execution finished    !  Start  DETAIL  Action execution started    !  Finish  DEFAULT  Action execution finished    ?  Occurrence  DETAIL  when pass,  DEFAULT  when fail  Check, a.k.a. assertion    I  Occurrence  INFO  Info log message    D  Occurrence  DEBUG  Debug log message", 
            "title": "First Column: Message Type"
        }, 
        {
            "location": "/test_results/#second-column-success", 
            "text": "Symbol  Description      .  Success is not relevant to the message    \u2713  Pass    \u2717  Failure", 
            "title": "Second Column: Success"
        }, 
        {
            "location": "/test_results/#elapsed-time", 
            "text": "Reports the time elapsed in seconds since the beginning of the  crash test  execution. Not present for checks\n(when the message type symbol is  ? ).", 
            "title": "Elapsed Time"
        }, 
        {
            "location": "/test_results/#step-duration", 
            "text": "Shows the time elapsed upon completion of a step, since the beginning of the step, \nas a string in the form \"3m0.5s\". Durations less than one second use a smaller unit \n(milli-, micro-, or nanoseconds).", 
            "title": "Step Duration"
        }, 
        {
            "location": "/test_results/#message", 
            "text": "The meat and potatoes of the logged event.", 
            "title": "Message"
        }, 
        {
            "location": "/test_results/#output-for-machines", 
            "text": "TODO", 
            "title": "Output for Machines"
        }, 
        {
            "location": "/crashfile_reference/", 
            "text": "Introduction\n\n\nCrashfiles, defined in YAML, tell \ncrash\n what to do.  \n\n\n\n\nThe Crashfile\n\n\nA note on examples: When you see \n# ...\n it denotes that the example is just a snippet\nof a larger document, which, by itself, is not valid. The context in which the snippet\nmust live is made clear by the accompanied documentation.\n\n\nPlans\n\n\nDefined at the root of the test plan document, \nplans\n is a list of plan objects, \nand every test plan document must define it. Plans are executed in the order defined, \nserially. Must have at least one entry.\n\n\nPlan\n\n\nA plan object defines a name and the list of steps that \ncrash\n will execute in a test run. \n\n\n\n\n\n\n\n\nProperties\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplan\n\n\nyes\n\n\nThe name of the plan which appears in test output.\n\n\n\n\n\n\nsteps\n\n\nyes\n\n\nA list of steps to execute. This step list is really an implicit \nserial\n step, which executes the steps sequentially, serially.\n\n\n\n\n\n\n\n\nExample:\n\n\n---\nplans:\n- plan: Plan A\n  steps:\n  # ...\n\n\n\n\nStep\n\n\nA step can be one of the types listed in the \nPlan Steps\n section.\nAny kind of step object may have the following properties:\n\n\n\n\n\n\n\n\nProperties\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncheck\n\n\nno\n\n\nA list of assertions to perform after the execution of the step is complete.\n\n\n\n\n\n\ntimeout\n\n\nno\n\n\nA time duration after which the step is aborted and is considered to have failed. A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"1.5s\" or \"2s300ms\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". Zero or negative timeouts are not permitted.\n\n\n\n\n\n\n\n\nVars\n\n\nDefined at the root of the test plan document, \nvars\n defines constants that are available\nat execution time.\n\n\n---\nvars:\n  key: value\n  foo: bar\n# ...\n\n\n\n\nPlan Steps\n\n\nParallel\n\n\nExecute a list of steps in parallel. The parallel step, itself, completes when all of the nested steps\nhave completed.\n\n\nExample:\n\n\n# ...\n- parallel:\n  - # step 1 ...\n  - # step 2 ...\n\n\n\n\nRun\n\n\nRun an action. Available actions can be browsed in the \"Action Reference\" from the main menu.\n\n\nActions are represented by an object having a \nrun\n property that has an object value. The object\nvalue has the following properties:\n\n\n\n\n\n\n\n\nProperties\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nyes\n\n\nThe name of the action which appears in test output.\n\n\n\n\n\n\ntype\n\n\nyes\n\n\nDictates which action is selected for execution.\n\n\n\n\n\n\nparams\n\n\nyes\n\n\nAn object defining action-specific key-value pairs that are passed into the action.\n\n\n\n\n\n\n\n\nExample:\n\n\n# ...\n- run:\n    name: Home page sample\n    type: http\n    params:\n      url: http://fooland.org\n\n\n\n\nSerial\n\n\nExecute a list of steps one after the other. The serial step, itself, completes when the last nested step completes.\n\n\nExample:\n\n\n# ...\n- serial:\n  - # step 1 ...\n  - # step 2 ...\n\n\n\n\nExample\n\n\nThis example intends to show all basic \ncrash\n features.\n\n\n---\nvars:\n  base_url: http://example.com\n\nplans:\n- plan: Sooper Site\n  steps:\n  - parallel:\n    - run:\n        name: home page\n        type: http\n        params:\n          url: ${base_url}\n      check:\n      - status-code in 200, 299 // http status ${status-code} is 4xx\n      - body contains '\n!doctype html\n' // has doctype declaration\n      - headers.content-type eq 'text/html'\n    - run:\n        name: about page\n        type: http\n        params:\n          url: ${base_url}/about.html\n      check:\n      - status-code eq 200\n      - body contains 'Copyright'", 
            "title": "Crashfile Reference"
        }, 
        {
            "location": "/crashfile_reference/#introduction", 
            "text": "Crashfiles, defined in YAML, tell  crash  what to do.", 
            "title": "Introduction"
        }, 
        {
            "location": "/crashfile_reference/#the-crashfile", 
            "text": "A note on examples: When you see  # ...  it denotes that the example is just a snippet\nof a larger document, which, by itself, is not valid. The context in which the snippet\nmust live is made clear by the accompanied documentation.", 
            "title": "The Crashfile"
        }, 
        {
            "location": "/crashfile_reference/#plans", 
            "text": "Defined at the root of the test plan document,  plans  is a list of plan objects, \nand every test plan document must define it. Plans are executed in the order defined, \nserially. Must have at least one entry.", 
            "title": "Plans"
        }, 
        {
            "location": "/crashfile_reference/#plan", 
            "text": "A plan object defines a name and the list of steps that  crash  will execute in a test run.      Properties  Required  Description      plan  yes  The name of the plan which appears in test output.    steps  yes  A list of steps to execute. This step list is really an implicit  serial  step, which executes the steps sequentially, serially.     Example:  ---\nplans:\n- plan: Plan A\n  steps:\n  # ...", 
            "title": "Plan"
        }, 
        {
            "location": "/crashfile_reference/#step", 
            "text": "A step can be one of the types listed in the  Plan Steps  section.\nAny kind of step object may have the following properties:     Properties  Required  Description      check  no  A list of assertions to perform after the execution of the step is complete.    timeout  no  A time duration after which the step is aborted and is considered to have failed. A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"1.5s\" or \"2s300ms\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". Zero or negative timeouts are not permitted.", 
            "title": "Step"
        }, 
        {
            "location": "/crashfile_reference/#vars", 
            "text": "Defined at the root of the test plan document,  vars  defines constants that are available\nat execution time.  ---\nvars:\n  key: value\n  foo: bar\n# ...", 
            "title": "Vars"
        }, 
        {
            "location": "/crashfile_reference/#plan-steps", 
            "text": "", 
            "title": "Plan Steps"
        }, 
        {
            "location": "/crashfile_reference/#parallel", 
            "text": "Execute a list of steps in parallel. The parallel step, itself, completes when all of the nested steps\nhave completed.  Example:  # ...\n- parallel:\n  - # step 1 ...\n  - # step 2 ...", 
            "title": "Parallel"
        }, 
        {
            "location": "/crashfile_reference/#run", 
            "text": "Run an action. Available actions can be browsed in the \"Action Reference\" from the main menu.  Actions are represented by an object having a  run  property that has an object value. The object\nvalue has the following properties:     Properties  Required  Description      name  yes  The name of the action which appears in test output.    type  yes  Dictates which action is selected for execution.    params  yes  An object defining action-specific key-value pairs that are passed into the action.     Example:  # ...\n- run:\n    name: Home page sample\n    type: http\n    params:\n      url: http://fooland.org", 
            "title": "Run"
        }, 
        {
            "location": "/crashfile_reference/#serial", 
            "text": "Execute a list of steps one after the other. The serial step, itself, completes when the last nested step completes.  Example:  # ...\n- serial:\n  - # step 1 ...\n  - # step 2 ...", 
            "title": "Serial"
        }, 
        {
            "location": "/crashfile_reference/#example", 
            "text": "This example intends to show all basic  crash  features.  ---\nvars:\n  base_url: http://example.com\n\nplans:\n- plan: Sooper Site\n  steps:\n  - parallel:\n    - run:\n        name: home page\n        type: http\n        params:\n          url: ${base_url}\n      check:\n      - status-code in 200, 299 // http status ${status-code} is 4xx\n      - body contains ' !doctype html ' // has doctype declaration\n      - headers.content-type eq 'text/html'\n    - run:\n        name: about page\n        type: http\n        params:\n          url: ${base_url}/about.html\n      check:\n      - status-code eq 200\n      - body contains 'Copyright'", 
            "title": "Example"
        }, 
        {
            "location": "/commands/", 
            "text": "help\n\n\ncrash help\n\n\nNAME:\n   crash - Run functional and performance tests, asserting and reporting on results.\n   For more detailed help, run: crash help \ncommand\n\n\nUSAGE:\n   crash [global options] command [command options] [arguments...]\n\nVERSION:\n   0.0.5\n\nAUTHOR(S):\n   Troy Kinsella \n\nCOMMANDS:\n     test, t      Execute a Crashfile test plan\n     validate, v  Validate a Crashfile test plan without running it\n     help, h      Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --help, -h     show help\n   -V, --version  print the version\n\n\n\n\ntest\n\n\ncrash test -h\n\n\nNAME:\n   crash test - Execute a Crashfile test plan\n\nUSAGE:\n   crash test [command options] [arguments...]\n\nDESCRIPTION:\n   A Crashfile to execute can be specified with the -f option,\n   or if omitted, crash searches the current directory for the first match, in order:\n     * Crashfile\n     * Crashfile.yml\n     * Crashfile.yaml\n\n\nOPTIONS:\n   -j                 Format logging output as JSON\n   --nc               No color. Disable output colorization.\n   -q                 Quiet mode; suppress logging\n   -s FILE|KEY=VALUE  Set variable(s) FILE|KEY=VALUE\n   -v                 Verbose logging; Use -vv or -vvv to increase verbosity\n   -f FILE            Crashfile test plan yaml FILE; Defaults to searching for Crashfile.y[a]ml in the current directory\n\n\n\n\nvalidate\n\n\ncrash validate -h\n\n\nNAME:\n   crash validate - Validate a Crashfile test plan without running it\n\nUSAGE:\n   crash validate [command options] [arguments...]\n\nOPTIONS:\n   -f FILE  Crashfile test plan yaml FILE", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#help", 
            "text": "crash help  NAME:\n   crash - Run functional and performance tests, asserting and reporting on results.\n   For more detailed help, run: crash help  command \n\nUSAGE:\n   crash [global options] command [command options] [arguments...]\n\nVERSION:\n   0.0.5\n\nAUTHOR(S):\n   Troy Kinsella \n\nCOMMANDS:\n     test, t      Execute a Crashfile test plan\n     validate, v  Validate a Crashfile test plan without running it\n     help, h      Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --help, -h     show help\n   -V, --version  print the version", 
            "title": "help"
        }, 
        {
            "location": "/commands/#test", 
            "text": "crash test -h  NAME:\n   crash test - Execute a Crashfile test plan\n\nUSAGE:\n   crash test [command options] [arguments...]\n\nDESCRIPTION:\n   A Crashfile to execute can be specified with the -f option,\n   or if omitted, crash searches the current directory for the first match, in order:\n     * Crashfile\n     * Crashfile.yml\n     * Crashfile.yaml\n\n\nOPTIONS:\n   -j                 Format logging output as JSON\n   --nc               No color. Disable output colorization.\n   -q                 Quiet mode; suppress logging\n   -s FILE|KEY=VALUE  Set variable(s) FILE|KEY=VALUE\n   -v                 Verbose logging; Use -vv or -vvv to increase verbosity\n   -f FILE            Crashfile test plan yaml FILE; Defaults to searching for Crashfile.y[a]ml in the current directory", 
            "title": "test"
        }, 
        {
            "location": "/commands/#validate", 
            "text": "crash validate -h  NAME:\n   crash validate - Validate a Crashfile test plan without running it\n\nUSAGE:\n   crash validate [command options] [arguments...]\n\nOPTIONS:\n   -f FILE  Crashfile test plan yaml FILE", 
            "title": "validate"
        }, 
        {
            "location": "/actions/http/", 
            "text": "http\n\n\nMake a request to an HTTP or HTTPS server.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nno\n\n\n\"GET\"\n\n\nThe HTTP request method to use.\n\n\n\n\n\n\nurl\n\n\nyes\n\n\n\n\nThe URL against which a request will be made. Must have an \"http://\" or \"https://\" scheme.\n\n\n\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nThe response body string.\n\n\n\n\n\n\nheaders\n\n\nA map of HTTP headers returned in the response.\n\n\n\n\n\n\nstatus-code\n\n\nThe HTTP response status code.\n\n\n\n\n\n\nraw-body\n\n\nThe response body bytes.\n\n\n\n\n\n\n\n\nExamples\n\n\n# Crashfile\n---\nplans:\n- plan: Sooper Site\n  steps:\n  - run:\n      name: Home Page\n      type: http\n      params:\n        method: get\n        url: http://example.com\n    check:\n    - status-code in 200, 299 // http status ${status-code} is 2xx\n    - body contains '\n!doctype html\n' // has html5 doctype declaration\n    - headers.content-type eq 'text/html'\n\n\n\n\nStandard output (-vvv):\n\n\n# . 0.0s Sooper Site\n- . 0.0s serial\n! . 0.0s Home Page\nD . 0.0s GET http://example.com\nI . 0.0s GET http://example.com -\n 200\n! \u2713 0.0s (44.188317ms) Home Page\n? \u2713 http status 200 is 2xx\n? \u2713 has html5 doctype declaration\n? \u2713 headers.content-type eq 'text/html'\n- \u2713 0.0s (44.366874ms) serial\n# \u2713 0.0s (44.393471ms) Sooper Site\n\n\n\n\nJSON output (-vvv):\n\n\n{\nmessage\n:\nSooper Site\n,\ntimestamp\n:\n2016-10-18T00:52:14.718420744Z\n,\ntype\n:\nplan\n}\n{\nmessage\n:\nserial\n,\ntimestamp\n:\n2016-10-18T00:52:14.718483765Z\n,\ntype\n:\nserial\n}\n{\nmessage\n:\nHome Page\n,\nresult\n:null,\ntimestamp\n:\n2016-10-18T00:52:14.718531579Z\n,\ntype\n:\naction\n}\n{\nmessage\n:\nGET http://example.com\n,\ntimestamp\n:\n2016-10-18T00:52:14.718645005Z\n,\ntype\n:\ndebug\n}\n{\nmessage\n:\nGET http://example.com -\\u003e 200\n,\ntimestamp\n:\n2016-10-18T00:52:14.741622882Z\n,\ntype\n:\ninfo\n}\n{\nduration\n:23566624,\nmessage\n:\nHome Page\n,\nresult\n:{\nbody\n:\n\\u003c!doctype html\\u003e\\n\\u003chtml\\u003e\\n\\u003chead\\u003e\\n    \\u003ctitle\\u003eExample Domain\\u003c/title\\u003e\\n\\n    \\u003cmeta charset=\\\nutf-8\\\n /\\u003e\\n    \\u003cmeta http-equiv=\\\nContent-type\\\n content=\\\ntext/html; charset=utf-8\\\n /\\u003e\\n    \\u003cmeta name=\\\nviewport\\\n content=\\\nwidth=device-width, initial-scale=1\\\n /\\u003e\\n    \\u003cstyle type=\\\ntext/css\\\n\\u003e\\n    body {\\n        background-color: #f0f0f2;\\n        margin: 0;\\n        padding: 0;\\n        font-family: \\\nOpen Sans\\\n, \\\nHelvetica Neue\\\n, Helvetica, Arial, sans-serif;\\n        \\n    }\\n    div {\\n        width: 600px;\\n        margin: 5em auto;\\n        padding: 50px;\\n        background-color: #fff;\\n        border-radius: 1em;\\n    }\\n    a:link, a:visited {\\n        color: #38488f;\\n        text-decoration: none;\\n    }\\n    @media (max-width: 700px) {\\n        body {\\n            background-color: #fff;\\n        }\\n        div {\\n            width: auto;\\n            margin: 0 auto;\\n            border-radius: 0;\\n            padding: 1em;\\n        }\\n    }\\n    \\u003c/style\\u003e    \\n\\u003c/head\\u003e\\n\\n\\u003cbody\\u003e\\n\\u003cdiv\\u003e\\n    \\u003ch1\\u003eExample Domain\\u003c/h1\\u003e\\n    \\u003cp\\u003eThis domain is established to be used for illustrative examples in documents. You may use this\\n    domain in examples without prior coordination or asking for permission.\\u003c/p\\u003e\\n    \\u003cp\\u003e\\u003ca href=\\\nhttp://www.iana.org/domains/example\\\n\\u003eMore information...\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003c/div\\u003e\\n\\u003c/body\\u003e\\n\\u003c/html\\u003e\\n\n,\nheaders\n:{\nAccept-Ranges\n:[\nbytes\n],\nCache-Control\n:[\nmax-age=604800\n],\nContent-Type\n:[\ntext/html\n],\nDate\n:[\nTue, 18 Oct 2016 00:52:14 GMT\n],\nEtag\n:[\n\\\n359670651+gzip\\\n],\nExpires\n:[\nTue, 25 Oct 2016 00:52:14 GMT\n],\nLast-Modified\n:[\nFri, 09 Aug 2013 23:54:35 GMT\n],\nServer\n:[\nECS (mdw/1275)\n],\nVary\n:[\nAccept-Encoding\n],\nX-Cache\n:[\nHIT\n],\nX-Ec-Custom-Error\n:[\n1\n]},\nraw-body\n:\nPCFkb2N0eXBlIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDx0aXRsZT5FeGFtcGxlIERvbWFpbjwvdGl0bGU+CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiIC8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCIgLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIgLz4KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAgICBib2R5IHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYyOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIGZvbnQtZmFtaWx5OiAiT3BlbiBTYW5zIiwgIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAgICAgICAKICAgIH0KICAgIGRpdiB7CiAgICAgICAgd2lkdGg6IDYwMHB4OwogICAgICAgIG1hcmdpbjogNWVtIGF1dG87CiAgICAgICAgcGFkZGluZzogNTBweDsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDFlbTsKICAgIH0KICAgIGE6bGluaywgYTp2aXNpdGVkIHsKICAgICAgICBjb2xvcjogIzM4NDg4ZjsKICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICB9CiAgICBAbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHsKICAgICAgICBib2R5IHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICB9CiAgICAgICAgZGl2IHsKICAgICAgICAgICAgd2lkdGg6IGF1dG87CiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAxZW07CiAgICAgICAgfQogICAgfQogICAgPC9zdHlsZT4gICAgCjwvaGVhZD4KCjxib2R5Pgo8ZGl2PgogICAgPGgxPkV4YW1wbGUgRG9tYWluPC9oMT4KICAgIDxwPlRoaXMgZG9tYWluIGlzIGVzdGFibGlzaGVkIHRvIGJlIHVzZWQgZm9yIGlsbHVzdHJhdGl2ZSBleGFtcGxlcyBpbiBkb2N1bWVudHMuIFlvdSBtYXkgdXNlIHRoaXMKICAgIGRvbWFpbiBpbiBleGFtcGxlcyB3aXRob3V0IHByaW9yIGNvb3JkaW5hdGlvbiBvciBhc2tpbmcgZm9yIHBlcm1pc3Npb24uPC9wPgogICAgPHA+PGEgaHJlZj0iaHR0cDovL3d3dy5pYW5hLm9yZy9kb21haW5zL2V4YW1wbGUiPk1vcmUgaW5mb3JtYXRpb24uLi48L2E+PC9wPgo8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg==\n,\nstatus-code\n:200},\ntimestamp\n:\n2016-10-18T00:52:14.741920722Z\n,\ntype\n:\naction\n}\n{\nmessage\n:\nhttp status 200 is 2xx\n,\npass\n:true,\ntimestamp\n:\n2016-10-18T00:52:14.742137245Z\n,\ntype\n:\ncheck\n}\n{\nmessage\n:\nhas html5 doctype declaration\n,\npass\n:true,\ntimestamp\n:\n2016-10-18T00:52:14.742174952Z\n,\ntype\n:\ncheck\n}\n{\nmessage\n:\nheaders.content-type eq 'text/html'\n,\npass\n:true,\ntimestamp\n:\n2016-10-18T00:52:14.742213464Z\n,\ntype\n:\ncheck\n}\n{\nduration\n:23886213,\nmessage\n:\nserial\n,\ntimestamp\n:\n2016-10-18T00:52:14.742242492Z\n,\ntype\n:\nserial\n}\n{\nduration\n:23908740,\nmessage\n:\nSooper Site\n,\ntimestamp\n:\n2016-10-18T00:52:14.742264481Z\n,\ntype\n:\nplan\n}", 
            "title": "http"
        }, 
        {
            "location": "/actions/http/#http", 
            "text": "Make a request to an HTTP or HTTPS server.", 
            "title": "http"
        }, 
        {
            "location": "/actions/http/#parameters", 
            "text": "Name  Required  Default  Description      method  no  \"GET\"  The HTTP request method to use.    url  yes   The URL against which a request will be made. Must have an \"http://\" or \"https://\" scheme.", 
            "title": "Parameters"
        }, 
        {
            "location": "/actions/http/#outputs", 
            "text": "Name  Description      body  The response body string.    headers  A map of HTTP headers returned in the response.    status-code  The HTTP response status code.    raw-body  The response body bytes.", 
            "title": "Outputs"
        }, 
        {
            "location": "/actions/http/#examples", 
            "text": "# Crashfile\n---\nplans:\n- plan: Sooper Site\n  steps:\n  - run:\n      name: Home Page\n      type: http\n      params:\n        method: get\n        url: http://example.com\n    check:\n    - status-code in 200, 299 // http status ${status-code} is 2xx\n    - body contains ' !doctype html ' // has html5 doctype declaration\n    - headers.content-type eq 'text/html'  Standard output (-vvv):  # . 0.0s Sooper Site\n- . 0.0s serial\n! . 0.0s Home Page\nD . 0.0s GET http://example.com\nI . 0.0s GET http://example.com -  200\n! \u2713 0.0s (44.188317ms) Home Page\n? \u2713 http status 200 is 2xx\n? \u2713 has html5 doctype declaration\n? \u2713 headers.content-type eq 'text/html'\n- \u2713 0.0s (44.366874ms) serial\n# \u2713 0.0s (44.393471ms) Sooper Site  JSON output (-vvv):  { message : Sooper Site , timestamp : 2016-10-18T00:52:14.718420744Z , type : plan }\n{ message : serial , timestamp : 2016-10-18T00:52:14.718483765Z , type : serial }\n{ message : Home Page , result :null, timestamp : 2016-10-18T00:52:14.718531579Z , type : action }\n{ message : GET http://example.com , timestamp : 2016-10-18T00:52:14.718645005Z , type : debug }\n{ message : GET http://example.com -\\u003e 200 , timestamp : 2016-10-18T00:52:14.741622882Z , type : info }\n{ duration :23566624, message : Home Page , result :{ body : \\u003c!doctype html\\u003e\\n\\u003chtml\\u003e\\n\\u003chead\\u003e\\n    \\u003ctitle\\u003eExample Domain\\u003c/title\\u003e\\n\\n    \\u003cmeta charset=\\ utf-8\\  /\\u003e\\n    \\u003cmeta http-equiv=\\ Content-type\\  content=\\ text/html; charset=utf-8\\  /\\u003e\\n    \\u003cmeta name=\\ viewport\\  content=\\ width=device-width, initial-scale=1\\  /\\u003e\\n    \\u003cstyle type=\\ text/css\\ \\u003e\\n    body {\\n        background-color: #f0f0f2;\\n        margin: 0;\\n        padding: 0;\\n        font-family: \\ Open Sans\\ , \\ Helvetica Neue\\ , Helvetica, Arial, sans-serif;\\n        \\n    }\\n    div {\\n        width: 600px;\\n        margin: 5em auto;\\n        padding: 50px;\\n        background-color: #fff;\\n        border-radius: 1em;\\n    }\\n    a:link, a:visited {\\n        color: #38488f;\\n        text-decoration: none;\\n    }\\n    @media (max-width: 700px) {\\n        body {\\n            background-color: #fff;\\n        }\\n        div {\\n            width: auto;\\n            margin: 0 auto;\\n            border-radius: 0;\\n            padding: 1em;\\n        }\\n    }\\n    \\u003c/style\\u003e    \\n\\u003c/head\\u003e\\n\\n\\u003cbody\\u003e\\n\\u003cdiv\\u003e\\n    \\u003ch1\\u003eExample Domain\\u003c/h1\\u003e\\n    \\u003cp\\u003eThis domain is established to be used for illustrative examples in documents. You may use this\\n    domain in examples without prior coordination or asking for permission.\\u003c/p\\u003e\\n    \\u003cp\\u003e\\u003ca href=\\ http://www.iana.org/domains/example\\ \\u003eMore information...\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003c/div\\u003e\\n\\u003c/body\\u003e\\n\\u003c/html\\u003e\\n , headers :{ Accept-Ranges :[ bytes ], Cache-Control :[ max-age=604800 ], Content-Type :[ text/html ], Date :[ Tue, 18 Oct 2016 00:52:14 GMT ], Etag :[ \\ 359670651+gzip\\ ], Expires :[ Tue, 25 Oct 2016 00:52:14 GMT ], Last-Modified :[ Fri, 09 Aug 2013 23:54:35 GMT ], Server :[ ECS (mdw/1275) ], Vary :[ Accept-Encoding ], X-Cache :[ HIT ], X-Ec-Custom-Error :[ 1 ]}, raw-body : PCFkb2N0eXBlIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDx0aXRsZT5FeGFtcGxlIERvbWFpbjwvdGl0bGU+CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiIC8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCIgLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIgLz4KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAgICBib2R5IHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYyOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIGZvbnQtZmFtaWx5OiAiT3BlbiBTYW5zIiwgIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAgICAgICAKICAgIH0KICAgIGRpdiB7CiAgICAgICAgd2lkdGg6IDYwMHB4OwogICAgICAgIG1hcmdpbjogNWVtIGF1dG87CiAgICAgICAgcGFkZGluZzogNTBweDsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDFlbTsKICAgIH0KICAgIGE6bGluaywgYTp2aXNpdGVkIHsKICAgICAgICBjb2xvcjogIzM4NDg4ZjsKICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICB9CiAgICBAbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHsKICAgICAgICBib2R5IHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICB9CiAgICAgICAgZGl2IHsKICAgICAgICAgICAgd2lkdGg6IGF1dG87CiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAxZW07CiAgICAgICAgfQogICAgfQogICAgPC9zdHlsZT4gICAgCjwvaGVhZD4KCjxib2R5Pgo8ZGl2PgogICAgPGgxPkV4YW1wbGUgRG9tYWluPC9oMT4KICAgIDxwPlRoaXMgZG9tYWluIGlzIGVzdGFibGlzaGVkIHRvIGJlIHVzZWQgZm9yIGlsbHVzdHJhdGl2ZSBleGFtcGxlcyBpbiBkb2N1bWVudHMuIFlvdSBtYXkgdXNlIHRoaXMKICAgIGRvbWFpbiBpbiBleGFtcGxlcyB3aXRob3V0IHByaW9yIGNvb3JkaW5hdGlvbiBvciBhc2tpbmcgZm9yIHBlcm1pc3Npb24uPC9wPgogICAgPHA+PGEgaHJlZj0iaHR0cDovL3d3dy5pYW5hLm9yZy9kb21haW5zL2V4YW1wbGUiPk1vcmUgaW5mb3JtYXRpb24uLi48L2E+PC9wPgo8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg== , status-code :200}, timestamp : 2016-10-18T00:52:14.741920722Z , type : action }\n{ message : http status 200 is 2xx , pass :true, timestamp : 2016-10-18T00:52:14.742137245Z , type : check }\n{ message : has html5 doctype declaration , pass :true, timestamp : 2016-10-18T00:52:14.742174952Z , type : check }\n{ message : headers.content-type eq 'text/html' , pass :true, timestamp : 2016-10-18T00:52:14.742213464Z , type : check }\n{ duration :23886213, message : serial , timestamp : 2016-10-18T00:52:14.742242492Z , type : serial }\n{ duration :23908740, message : Sooper Site , timestamp : 2016-10-18T00:52:14.742264481Z , type : plan }", 
            "title": "Examples"
        }, 
        {
            "location": "/actions/shell/", 
            "text": "shell\n\n\nExecute a shell command.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nExamples", 
            "title": "shell"
        }, 
        {
            "location": "/actions/shell/#shell", 
            "text": "Execute a shell command.", 
            "title": "shell"
        }, 
        {
            "location": "/actions/shell/#parameters", 
            "text": "Name  Required  Default  Description", 
            "title": "Parameters"
        }, 
        {
            "location": "/actions/shell/#outputs", 
            "text": "Name  Description", 
            "title": "Outputs"
        }, 
        {
            "location": "/actions/shell/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/contributing/", 
            "text": "Reporting an Issue\n\n\nWhen \nreporting an issue\n, please include as much \ndetail as you can think of, including:\n\n\n\n\ncrash\n version\n\n\nOperating system\n\n\nSystem architecture\n\n\nStep-by-step instructions on how to reproduce the issue\n\n\nStack traces and any other relevant output\n\n\n\n\nBuilding the \ncrash\n Executable\n\n\nSet up a \nGo workspace\n.\n\n\nFrom your \nGOPATH\n, get the sources:\n\n\n$ go get github.com/troykinsella/crash\n\n\n\n\nInstall dependencies:\n\n\n$ go get -d -v ./...\n\n\n\n\nBuild the binary:\n\n\n$ go build -o crash -v github.com/troykinsella/crash/cmd\n\n\n\n\nRuning Tests\n\n\nFrom your \nGOPATH\n:\n\n\ngo test github.com/troykinsella/crash/...", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#reporting-an-issue", 
            "text": "When  reporting an issue , please include as much \ndetail as you can think of, including:   crash  version  Operating system  System architecture  Step-by-step instructions on how to reproduce the issue  Stack traces and any other relevant output", 
            "title": "Reporting an Issue"
        }, 
        {
            "location": "/contributing/#building-the-crash-executable", 
            "text": "Set up a  Go workspace .  From your  GOPATH , get the sources:  $ go get github.com/troykinsella/crash  Install dependencies:  $ go get -d -v ./...  Build the binary:  $ go build -o crash -v github.com/troykinsella/crash/cmd", 
            "title": "Building the crash Executable"
        }, 
        {
            "location": "/contributing/#runing-tests", 
            "text": "From your  GOPATH :  go test github.com/troykinsella/crash/...", 
            "title": "Runing Tests"
        }
    ]
}